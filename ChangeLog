Cibyl (12)
	* Added generation of Doxygen documentation (run make clean first)

	* Bug fix in the global jump table generation: Static functions
	incorrectly called the same label if they have the same name

	* Implemented NOPH_throw which allows throwing of Java exceptions
	from C.

	* New file operations structure, which makes the standard "FILE"
	stuff much more useful and also the implementation more
	sane. Almost everything is now implemented in C which is also
	easier to maintain and has fewer Java special cases among the
	syscalls. The new structure also allows URI-style passing of
	options to fopen.

	* Implemented the --optimize-colocate-functions=FNs option, which
	colocates C functions into one Java method. This can significantly
	improve performance if you can place a hot callchain in a single
	Java method

	* Moved the stackStore optimization to function.py (from
 	javamethod.py) since it really works on functions and not methods
	and also call it from fixup()

	* Fixed a bug where the first basic block of a function was by
	mistake made empty (this nullified the skip-stack-stores
	optimization), and also a problem with the last basic block. The
	bug fix will make generated code slightly smaller.

	-- Simon Kagstrom <simon.kagstrom@gmail.com>

Cibyl (11)
	* The size of the operand stack is now dynamically set depending
	on the instructions used by the recompiled method. An option has
	also been added to allow manual setting of this size.

	* The peephole optimizer has been improved to catch a few more
	cases

	* The mult and div instructions are now always handled inlined and
	the runtime functions multu and divu return a long result. This
	allows the MIPS hi/lo registers to be represented as normal Java
	local registers, which will be needed for future threading
	implementations. It might also improve performance in some cases

	* Implemented catching of exceptions in C with the
	NOPH_try(handler, arg) / NOPH_catch() pair. The use of
	NOPH_exception is now deprecated and should be replaced with
	NOPH_try/NOPH_catch pairs.

	* Fixed bug in jalr and jal where the destination registers were
	wrong

	* Switched to manage the project at google code,
	http://cibyl.googlecode.com, the subversion repository is at
	http://cibyl.googlecode.com/svn/

	* Implemented the option --optimize-indirect-calls, which provides
	a more compact global jumptab (containing only those functions
	which are used through function pointers instead of all
	functions). This significantly reduces the size of most
	applications.

	* The test application now outputs on a console, which allows it
	to run on real phones. Also reduced the output generated and
	renamed the application.

	* Fixed Font.charWidth() with a non-generated implementation

	* Optimized the cleanup register generation (fewer registers are
	now cleaned)

	* Fixed a bug in __fixunssfsi_helper.java where values above or
	equal to 1^32 were incorrectly handled (truncated)

	* More floating point and double checks, and better support for
	typecast checks in the test framework

	* Added optimizations to inline function calls to builtin
	functionality (currently the floating point support). This can be
	enabled by passing --optimize-inline-all-builtins (enable
	globally) or --optimize-inline-builtins=FUNCTIONS (enable for a
	set of functions). This can significantly improve the performance
	of floating point operations, but will also increase the
	class size.

	Implemented builtin optimizations for much of the float support

	* Emit .line and .var information only if -g is defined

	* Bug fix in the syscall definitions: Clobber v0 (thanks to Ehud
	Shabtai for reporting this!)

	-- Simon Kagstrom <simon.kagstrom@gmail.com>, Sun Jul 22 13:40:07 CEST 2007

Cibyl (10)
	* Fixed build dependency in the s9 example so that it builds
	correctly

	* Catch addu v0, v0, zero (and similar). This can sometimes be
	generated by the Cibyl system calls

	* Simplified name mangling: Only append the address if the symbol
	has local linkage

	* Fixed bug where System.currentTimeMillis() returned a 32-bit
	value, which causes hard-to-find wrap-around problems. Oh my.

	* C++ fix: Allow undefined symbols (assuming they are not
	accessed!)

	* C++ fix: Don't demangle symbols in elf.py

	* C++ fix: Build C++ source with -fno-rtti and -fno-exceptions

	* C++ support has been partially implemented (support for
	operator::new/delete, error printouts)

	-- Simon Kagstrom <simon.kagstrom@gmail.com>, Sat May 19 14:59:29 CEST 2007

Cibyl (9)
	* Assert that the first object (0) in the object repostiory
	actually is == null

	* Added support for "faulting in" more heap space (from derived
	from TastePhone). This will be used if a fixed size of the memory
	has been selected in CibylConfig.

	* libs9 has been added. S9 (Simon-9 or Sarien-9) is an
	implementation of a T9-style input database. The reasoning behind
	this is that the built-in text entry in J2ME usually (ever?) does
	not support setting user dictionaries. The Sarien port uses this
	to implement T9-style input with the game dictionaries. The s9
	example shows how to use it.

	* libcibar has been added. Cibar implements an ar-style archive
	which can be read (almost) as normal files. It's used to avoid
	having to open FileConnections all the time (which usually means
	an irritating dialogue all the time)

	* Test cases now depend on JSR075

	* Reorganization of the syscall set names (java.lang->java)

	* Added utility function NOPH_String_toCharPtr() which writes a
	Java String object to a memory address (as a char*)

	* Some more ANSI C functionality added (toupper, opendir, readdir,
	closedir). The latter are only available on systems with JSR075
	(PIM/PDA) implemented. Misc functionality in the java libraries
	has also been added to support this

	* The cibyl-gdbserver tool has been added. This allows Cibyl
	programs to be debugged with GDB. The -g option to cibyl-mips2java
	is needed for the gdbserver to work.

	* Added -g option to cibyl-mips2java provide some debugging output

	* Minor optimization: Skip zeroing of the RA register (it's not
	used anyway)

	* A peephole optimizer for the Jasmin assembly source output has
	been implemented. A cibyl-peephole-optimize tool executes this
	optimization. The peephole optimizer can improve some code quite
	substantially

	* Fixed a bug in the syscall definitions (which could sometimes
	cause v0 to be overwritten)

	* Workaround for bug in Nokia JVMs - place the local jumptab
	before the function return

	* Fixed the implementation of exit() so that it actually exits on
	 J2ME as well (Ehud Shabtai)

	* Java files are now preprocessed by cpp and the
	cibyl-generate-java-wrappers tool takes a -D option to pass
	arguments to cpp. Non-J2ME apps are now passed -D NOJ2ME to
	conditionally compile out certain things

	* fseek supports SEEK_CUR as well now and can also operate on both
	resource streams and the FileConnection API (jsr075). (Ehud
	Shabtai)

	* atan, asin etc has been added to the softfloat support. The
	implementation uses mMath.java which is written by Richard Carless.
	The support was added by Ehud Shabtai

	* Strings can now use arbitrary encodings supported by J2ME
	(Ehud Shabtai)

	* Implemented MIDP event handling, like keyPressed events. These
	are delivered to a callback function in C. Also added an example
	program (j2me-events) and defined a set of Canvas events.

	* Fixed a bug in the generation of the global jumptable when the
	register scheduler optimization was turned on. It simply generated
	incorrect code.

	* Fixed bug in the slt instruction, which incorrectly inherited
	from OneRegisterSetInstruction - it is a two-register
	instruction. This fixed the previously broken register scheduler.

	* Reenabled the mul/div/mod optimization (generate direct Java
	bytecode for common cases) and implemented correct mod handling

	* Fixed bug in fwrite when size == 1

	* Fixed a bug where malloc was allowed to overwrite both the stack
	and outside of allocated memory.

	* Cibyl configuration file added (CibylConfig.java). This can be
	used to specify the memory size and the stack size for the Cibyl
	program and made some more things configurable in the Makefile

	* Implemented support for using external system call sets and an
	example which shows how this is done
	(examples/external-syscalls). This also added a number of options
	to cibyl-mips2java and cibyl-generate-java-wrappers

	* jmicropolygon, a library to draw filled and outlined polygons
	written by Simon Turner has been added (Ehud Shabtai)

	* Changed the way system calls work to store the system call name
	in a special section to simplify use of external system call sets

	* Optimized versions of some ANSI C functionality (memset, fread)
	has been implemented (Ehud Shabtai)

	* The ANSI C support has been extended in many places (Ehud
	Shabtai).

	* Some preparations for threading support, although this is not
	yet implemented. It is described in docs/threading.txt

	* Simplified certain things - the stack is now setup in crt0.S

	* Fixed bug in __fixunsdfsi_helper.java where values > 0xffffffff
	were incorrectly converted (such values should become
	0xffffffff). The workaround in vsnprintf introduced in version 8
	is therefore now reverted,

	* Memory tests started on (lwl and swl regression tests so far),
	never inline test functions. Also added an exception test. The
	test program is now a J2ME app.

	* Fixed bugs in __strncmp and __strncpy where the last char was not
	copied (Ehud Shabtai)

	* Two new options to cibyl-mips2java to improve tracing of larger
	programs: --trace-function-instructions and --trace-function-calls

	* Fixed three bugs in CRunTime.java where the function for swl was
	wrongly named and implemented the wrong way (backwards!). Also,
	the bytes were written in the wrong endian-order in both swl and
	lwl. Further, lwl should read unsigned bytes so that
	sign-extension does not ruin the fun.

	* More javax.microedition classes and methods added, e.g.,
	javax.microedition.lcdui.Form and .Alert (me, Ehud Shabtai)

	* Fixed various minor build system issues (enable debugging
	symbols, path to J2ME emulator)

	* Function pruning is now always enabled because it interfers with
	the pruning of used system calls (these two must be synchronized)

	* Fixed bug in cibyl-softfloat.h where __fixsidf was defined and
	no such function is used by the GCC softfloat support (reported by
	Ehud Shabtai)

	* Fixed bug where the syscalls generated from functions were not
	properly pruned (reported by Ehud Shabtai)

	-- Simon Kagstrom <simon.kagstrom@gmail.com>, Sat Apr 28 13:57:53 CEST 2007

Cibyl (8)
	* Workaround a Cibyl bug in vsnprintf (fix this later)

	* Implemented inf and nan support for vsnprintf

	* vsnprintf now has support for floating point ops enabled. This
	works by making the symbol weak and rebuilding it for
	libsoftfloat.a (now actually just a .o-file).

	* Better structure and much more expandable test infrastructure
	has been added which allows for regression tests. Tests for floats
	and doubles has been added as well. The test-cases example has
	been removed.

	* Various libm functionality has been added (sin/cos, pow, exp
	etc), but this is still not complete

	* Floating point has been fully implemented
	(except for long doubles) as a soft-float implementation
	[Me, Roelof Berg]

	* Restructured the code to have less MIPS dependencies. The code
	now follows a more logical module structure with MIPS-dependencies
	in the Mips subdir and optimizations in the Optimizations subdir

	-- Simon Kagstrom <simon.kagstrom@gmail.com>, Sun Jan 21 19:21:38 CET 2007

Cibyl (7)
	* A few more J2ME calls were added

	* Started on floating point support. Cibyl uses -msoft-float and
	optimized implementations of the support functions. This can be
	done since Cibyl will just call Java helpers to implement the
	functions using the native Java float/double types. See
	doc/floating-point.txt for more about this.

	* saved_v1 is now placed in CRunTime to avoid Jasmin
	incompatibilities [Roelof Berg]

	* Use environment variables for readelf/nm/objcopy and jasmin
	[Roelof Berg]

	* Extended the Graphics and GameCanvas classes slightly

	* Cygwin fix: Don't write objcopy output to stdout but instead to
	a tempfile. Cygwin does not have /dev/stdout etc. [Roelof Berg]

	* Fixed bug in the creation of basic blocks. Backward-branches
	were not counted as they should and the first basic block was
	incorrect if it started with a branch

	* sltu has been optimized for the common case of comparing to
	zero, which can be done without the runtime environment support

	* Replaced the Java implementation of malloc/free with a more
	efficient one in C written by Calin A. Culianu. This also made the
	ANSI C library slightly simpler.

	* Fixed bug where the mult/div optimization did not work for
	instructions in the delay slot.

	* The memory register optimization has been broken for a while,
	but is now fixed again.

	* Implemented a register scheduler so that only used registers in
	a function/method are allocated. This also helps to minimize the
	number of registers passed to leaf methods and also avoids storing
	to v0 all the time.

	* Fixed bug where instructions in delay slots did not have their
	fixup() methods called.

	* Added command-line option -O / --optimize-all to turn on all
	optimizations

	* Set LANG explicitly in env.sh so that readelf-parsing works OK
	["7not6"]

	* Implemented optimization that avoids the storing and restoring
	of caller-saved registers on the stack. Since registers are stored
	in local variables in Cibyl, these are automatically kept in
	function invocations. This optimization rarely improves
	performance, but it does reduce class size a bit.

	* Implemented one-C-function-per-Java method, which should reduce
	the total size of the compiled class as well as allow some
	interesting (future) optimizations.

	Another benefit with the one-to-one mapping is that the J2ME
	emulator profiler now produces meaningful output for Cibyl.

	* Removed fgets and fputs in exit() - it's placed in the
	syscalls/ansi/init now anyway

	-- Simon Kagstrom <simon.kagstrom@gmail.com>, Fri Dec  1 13:33:05 CET 2006

Cibyl (6)
	* The Java stub generator now generates direct accesses to the
	object repository instead of calling a "getter" method. This
	should improve performance somewhat.

	* As a safety-measure, disable GCC's tail recursion optimization
	(-fno-optimize-sibling-calls), which can cause problems with
	cross-method calls

	* Support for global constructors and destructors has been
	added. The linker script has been extended to add the .ctors and
	.dtors sections.

	* Added libdebug.a with stack/register dump facilities

	* Fixed bug in the setting of the stack pointer in CRunTime.java

	* Reorganized ansi/libc support into a library (build libc.a)

 	* The lwl/lwr and swl/swr instruction pairs has been
	implemented. A difference compared to hardware is that lwr and swr
	does not actually do anything, but since these instructions are
	used in pairs this should not be noticable.

	* Implemented more of ANSI C - mainly FILE*-stuff, but also some
	string and memory handling parts

	* Reworked the API handling. To better support libraries, the
	system call numbers are now fixed.

	The C API has also been split in several header files to provide
	better compatibility with ANSI C and more logical structuring of
	the J2ME APIs.

	* Fixed a bug in the linker script. Not all read-only sections
	were loaded. GCC sometimes loads addresses from read-only memory,
	and this caused strange errors

	-- Simon Kagstrom <simon.kagstrom@bth.se>, Sat Nov 18 10:08:53 CET 2006

Cibyl (5)
	* Mainly a bugfix release

	* Control optimizations with command-line options, default to no
	optimizations

	* Restructured part of the binary translator in multiple files

	* GCC 4.0 needs memory clobbering on syscalls, fixed that

	* xori and some other instructions uses a zero-extended immediate
	value, this is now handled correctly.

	* Corrected the jalr instruction (does not always store the return
	address in RA)

	* Implemented handling of the bal instruction

	* Corrected size-fixing in elf.py and store symbols by address
	(there are programs with multiple symbols with the same
	name). This fixes some issues in GCC 4.0

	* Allocate 2/3 of the available memory for the C program instead
	of fixing it at 128KB

	* -O2 was incorrectly selected as default in version 4 and
	earlier, fixed that and made cc/ld etc possible to override

	* Fixed the fopen call to try/catch exceptions

	-- Simon Kagstrom <simon.kagstrom@bth.se>, Sat Nov  4 08:13:44 CET 2006

Cibyl (4)
	* Implemented exception handling (the NOPH_exception global
	variable)
	* Fixed a bug on conversion char* to Java strings
	* Support for RecordStore
	* assert and misc other stuff added

	-- Simon Kagstrom <simon.kagstrom@bth.se>, Thu Oct 12 12:52:14 CEST 2006

r11390: Release 3

r9480: Registers stored in local variables
